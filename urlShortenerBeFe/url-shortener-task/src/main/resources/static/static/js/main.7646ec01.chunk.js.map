{"version":3,"sources":["logo.svg","App.js","serviceWorker.js","components/registerUrl.js","components/createAccount.js","components/statistic.js","components/help.js","index.js"],"names":["module","exports","__webpack_require__","p","App","react_default","a","createElement","Component","Boolean","window","location","hostname","match","RegisterUrl","state","accountIdValue","passwordValue","urlValue","handleChange","event","_this","setState","target","value","handleChange1","handleChange2","handleSubmit","preventDefault","request","XMLHttpRequest","open","setRequestHeader","btoa","timeout","onload","responseData","JSON","parse","response","status","alert","onerror","handleError","data","url","send","stringify","className","onSubmit","this","type","id","onChange","React","CreateAccount","AccountId","Statistic","console","log","table","document","querySelector","prop","rows","trElement","innerHTML","appendChild","Help","routing","react_router_dom","to","react_router","exact","path","component","ReactDOM","render","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.7646ec01.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React, { Component } from 'react';\nimport logo from './logo.svg';\nimport './App.css';\n\nclass App extends Component {\n  render() {\n    return (\n        <div>\n        <h1>Welcome to URL shortener</h1>\n      </div>\n    );\n  }\n}\n\n/**\n * Ajax error handler method.\n *\n * @param request - request object.\n * @param textStatus - status.\n */\nfunction handleError (request) {\n  if (request.status >= 400 && request.status <= 499) {\n   alert(\"Client error: \" + request.status + ' status code!');\n } else if (request.status >= 500 && request.status <= 599) {\n   alert(\"Internal Server Error: \" + request.status + \" status code!\");\n } else if (request.status === 0) {\n   alert(\"Connection is refused!\");\n } else {\n   alert(\"Unable to execute request. Please, try again!\");\n }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react'\r\nclass RegisterUrl extends React.Component {\r\n  state = {\r\n    accountIdValue : '',\r\n    passwordValue : '',\r\n    urlValue : ''\r\n  }\r\n\r\n\r\n  handleChange = (event) => {\r\n    this.setState({accountIdValue: event.target.value})\r\n  }\r\n\r\n  handleChange1 = (event) => {\r\n    this.setState({passwordValue: event.target.value})\r\n  }\r\n\r\n  handleChange2 = (event) => {\r\n    this.setState({urlValue: event.target.value})\r\n  }\r\n  \r\n  handleSubmit = (event) => {\r\n  event.preventDefault();\r\n  \r\n  var request = new XMLHttpRequest();\r\n  request.open('POST', 'http://localhost:8080/register', true);\r\n  request.setRequestHeader('Content-Type', \"application/json; charset=utf-8\");\r\n  request.setRequestHeader (\"Authorization\", \"Basic \" + btoa(this.state.accountIdValue + \":\" + this.state.passwordValue));\r\n  request.setRequestHeader('Access-Control-Allow-Origin', '*');\r\n  request.setRequestHeader('Access-Control-Allow-Methods', 'GET, POST, PATCH, PUT, DELETE, OPTIONS');\r\n  request.setRequestHeader('Access-Control-Allow-Headers' ,'Origin, Content-Type, X-Auth-Token');\r\n  request.timeout = 10000;\r\n  \r\n  request.onload = function () {\r\n    var responseData = JSON.parse(request.response);\r\n\r\n      if (request.status >= 200 && request.status < 400) {\r\n        alert(\"url is saved, Your shortUrl is: \" + responseData['shortUrl']);      \r\n       } else {\r\n         alert(\"Status: \" + responseData['status'] + \" \\nCode: \" + responseData['code'] + \"\\nError Msg: \" + responseData['AccountId'] + \"\\nEnter something and then submit\");\r\n       }\r\n  };\r\n  \r\n  request.onerror = function () {\r\n    handleError(request);\r\n  };\r\n  \r\n  var data = {\"url\":this.state.urlValue}\r\n  request.send(JSON.stringify(data));\r\n  \r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div className=\"RegisterUrlComponent\">\r\n      <h1>Register url</h1> \r\n      <p>Enter accountId, password and desired url</p>\r\n      <form className=\"RegUrl-Intro\" onSubmit={this.handleSubmit}>\r\n        <label> AccountId: </label>\r\n        <input type=\"text\" id=\"accountId\" onChange={this.handleChange}/>\r\n        <label>Password: </label>\r\n        <input type=\"text\" id=\"password\" onChange={this.handleChange1}/>\r\n        <label> Url: </label>\r\n        <input type=\"text\" id=\"Url\" onChange={this.handleChange2}/>\r\n        <input type=\"submit\" value=\"Sumbit\"/>\r\n      </form>\r\n    </div>\r\n    );\r\n  }\r\n}\r\n\r\nfunction handleError (request) {\r\n  if (request.status >= 400 && request.status <= 499) {\r\n   alert(\"Client error: \" + request.status + ' status code!');\r\n } else if (request.status >= 500 && request.status <= 599) {\r\n   alert(\"Internal Server Error: \" + request.status + \" status code!\");\r\n } else if (request.status === 0) {\r\n   alert(\"Connection is refused!\");\r\n } else {\r\n   alert(\"Unable to execute request. Please, try again!\");\r\n }\r\n}\r\nexport default RegisterUrl","import React from 'react'\r\n\r\nclass CreateAccount extends React.Component {\r\n  \r\n  state = {\r\n    accountIdValue : ''\r\n  }\r\n\r\n  handleChange = (event) => {\r\n    this.setState({accountIdValue: event.target.value})\r\n  }\r\n  \r\n  handleSubmit = (event) => {\r\n  event.preventDefault();\r\n  \r\n  var request = new XMLHttpRequest();\r\n  request.open('POST', 'http://localhost:8080/account', true);\r\n  request.setRequestHeader('Content-Type', \"application/json; charset=utf-8\");\r\n  request.timeout = 10000;\r\n  \r\n  request.onload = function () {\r\n    var responseData = JSON.parse(request.response);\r\n\r\n      if (request.status >= 200 && request.status < 400) {\r\n        alert(\"User is saved, Your password is: \" + responseData['password']);      \r\n       } else {\r\n         alert(\"Status: \" + responseData['status'] + \" \\nCode: \" + responseData['code'] + \"\\nError Msg: \" + responseData['AccountId'] + \"\\nEnter something and then submit your accountId.\");\r\n       }\r\n  };\r\n  \r\n  request.onerror = function () {\r\n    handleError(request);\r\n  };\r\n  \r\n  var data = {\"AccountId\":this.state.accountIdValue}\r\n  request.send(JSON.stringify(data));\r\n  \r\n  }\r\n  \r\n  render() {\r\n    return (\r\n      <div className=\"CreateAccountComponent\">\r\n      <h1>Register your account</h1> \r\n      <p>Enter desired AccountId</p>\r\n      <form className=\"Reg-Intro\" onSubmit={this.handleSubmit}>\r\n        <input type=\"text\" onChange={this.handleChange}/>\r\n        <input type=\"submit\" value=\"Sumbit\"/>\r\n      </form>\r\n    </div>);\r\n  }\r\n}\r\n\r\nfunction handleError (request) {\r\n  if (request.status >= 400 && request.status <= 499) {\r\n   alert(\"Client error: \" + request.status + ' status code!');\r\n } else if (request.status >= 500 && request.status <= 599) {\r\n   alert(\"Internal Server Error: \" + request.status + \" status code!\");\r\n } else if (request.status === 0) {\r\n   alert(\"Connection is refused!\");\r\n } else {\r\n   alert(\"Unable to execute request. Please, try again!\");\r\n }\r\n}\r\n\r\nexport default CreateAccount","import React from 'react'\r\nclass Statistic extends React.Component {\r\n  state = {\r\n    accountIdValue : '',\r\n    passwordValue : '',\r\n  }\r\n\r\n\r\n  handleChange = (event) => {\r\n    this.setState({accountIdValue: event.target.value})\r\n  }\r\n\r\n  handleChange1 = (event) => {\r\n    this.setState({passwordValue: event.target.value})\r\n  }\r\n\r\n  handleSubmit = (event) => {\r\n  event.preventDefault();\r\n  \r\n  var request = new XMLHttpRequest();\r\n  request.open('GET', 'http://localhost:8080/statistic/'+this.state.accountIdValue, true);\r\n  request.setRequestHeader('Content-Type', \"application/json; charset=utf-8\");\r\n  request.setRequestHeader (\"Authorization\", \"Basic \" + btoa(this.state.accountIdValue + \":\" + this.state.passwordValue));\r\n  request.setRequestHeader('Access-Control-Allow-Origin', '*');\r\n  request.setRequestHeader('Access-Control-Allow-Methods', 'GET, POST, PATCH, PUT, DELETE, OPTIONS');\r\n  request.setRequestHeader('Access-Control-Allow-Headers' ,'Origin, Content-Type, X-Auth-Token');\r\n  request.timeout = 10000;\r\n  \r\n  request.onload = function () {\r\n    var responseData = JSON.parse(request.response);\r\n\r\n    console.log(request.response);\r\n\r\n\r\n      if (request.status >= 200 && request.status < 400) {        \r\n        var table = document.querySelector('table > tbody');\r\n        \r\n          for(var prop in responseData) {\r\n            var rows = '';\r\n            var trElement = document.createElement('tr');\r\n            rows = '<td>'+prop+'</><br/><td>'+responseData[prop]+'</td><br/>';\r\n            trElement.innerHTML = rows;\r\n            table.appendChild(trElement);\r\n          }\r\n\r\n       } else {\r\n    \r\n       }\r\n  };\r\n  \r\n  request.onerror = function () {\r\n    handleError(request);\r\n  };\r\n  \r\n  request.send();\r\n  \r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div className=\"StatisticComponent\">\r\n      <h1>Get statistic</h1> \r\n      <p>Enter accountId and password to Get Statistic</p>\r\n      <form className=\"RegUrl-Intro\" onSubmit={this.handleSubmit}>\r\n        <label> AccountId: </label>\r\n        <input type=\"text\" id=\"accountId\" onChange={this.handleChange}/>\r\n        <label>Password: </label>\r\n        <input type=\"text\" id=\"password\" onChange={this.handleChange1}/>\r\n        <input type=\"submit\" value=\"Sumbit\"/>\r\n      </form>\r\n      <table>\r\n        <tbody>\r\n        <tr><th>Full Url</th><th>Number of redirects</th></tr>\r\n        </tbody>\r\n      </table>\r\n    </div>\r\n    );\r\n  }\r\n\r\n\r\n}\r\n\r\nfunction handleError (request) {\r\n  if (request.status >= 400 && request.status <= 499) {\r\n   alert(\"Client error: \" + request.status + ' status code!');\r\n } else if (request.status >= 500 && request.status <= 599) {\r\n   alert(\"Internal Server Error: \" + request.status + \" status code!\");\r\n } else if (request.status === 0) {\r\n   alert(\"Connection is refused!\");\r\n } else {\r\n   alert(\"Unable to execute request. Please, try again!\");\r\n }\r\n}\r\n\r\nexport default Statistic","import React from 'react'\r\nclass Help extends React.Component {\r\n  render() {\r\n    return <h1>Help</h1>\r\n  }\r\n}\r\nexport default Help","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport { Route, Link, BrowserRouter as Router } from 'react-router-dom'\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport RegisterUrl from './components/registerUrl';\nimport CreateAccount from './components/createAccount';\nimport Statistic from './components/statistic';\nimport Help from './components/help';\n\n\nconst routing = (\n    <Router>\n      <div>\n      <ul>\n        <li>\n          <Link to=\"/\">Home</Link>\n        </li>\n        <li>\n          <Link to=\"/help\">Help</Link>\n        </li>\n        <li>\n          <Link to=\"/createAccount\">Create Account</Link>\n        </li>\n        <li>\n          <Link to=\"/registerUrl\">Register url</Link>\n        </li>\n        <li>\n          <Link to=\"/statistic\">Statistic</Link>\n        </li>\n      </ul>\n        <Route exact path=\"/\" component={App} />\n        <Route path=\"/registerUrl\" component={RegisterUrl} />\n        <Route path=\"/createAccount\" component={CreateAccount} />\n        <Route path=\"/statistic\" component={Statistic} />\n        <Route path=\"/help\" component={Help} />\n      </div>\n    </Router>\n  )\nReactDOM.render(routing, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}